[workspace]

# Here we declare that this is a workspace, containing several crates
# within it.
#
# Please keep this list topologically sorted by dependency relation, so
# that every crate appears _before_ any other crate that depends on it.
# This also applies to dev-dependencies.
# We depend on this for publishing to crates.io. e.g.
# see
# https://blog.iany.me/2020/10/gotchas-to-publish-rust-crates-in-a-workspace/#cyclic-dependencies
members = [
    "crates/oneshot-fused-workaround",
    "crates/slotmap-careful",
    "crates/test-temp-dir",
    "crates/fslock-guard",
    "crates/hashx",
    "crates/equix",
    "crates/tor-basic-utils",
    "crates/caret",
    "crates/fs-mistrust",
    "crates/safelog",
    "crates/retry-error",
    "crates/tor-error",
    "crates/tor-general-addr",
    "crates/tor-events",
    "crates/tor-geoip",
    "crates/tor-rtcompat",
    "crates/tor-rtmock",
    "crates/tor-async-utils",
    "crates/tor-config",
    "crates/tor-config-path",
    "crates/tor-rpc-connect",
    "crates/tor-log-ratelim",
    "crates/tor-rpcbase",
    "crates/tor-memquota",
    "crates/tor-units",
    "crates/tor-llcrypto",
    "crates/tor-protover",
    "crates/tor-bytes",
    "crates/tor-checkable",
    "crates/tor-cert",
    "crates/tor-key-forge",
    "crates/tor-hscrypto",
    "crates/tor-socksproto",
    "crates/tor-linkspec",
    "crates/tor-cell",
    "crates/tor-proto",
    "crates/tor-netdoc",
    "crates/tor-consdiff",
    "crates/tor-netdir",
    "crates/tor-relay-selection",
    "crates/tor-congestion",
    "crates/tor-persist",
    "crates/tor-chanmgr",
    "crates/tor-ptmgr",
    "crates/tor-guardmgr",
    "crates/tor-circmgr",
    "crates/tor-dirclient",
    "crates/tor-dirmgr",
    "crates/tor-keymgr",
    "crates/tor-hsclient",
    "crates/tor-hsservice",
    "crates/tor-hsrproxy",
    "crates/tor-relay-crypto",
    "crates/arti-client",
    "crates/arti-relay",
    "crates/arti-rpcserver",
    "crates/arti-config",
    "crates/arti",
    "crates/arti-bench",
    "crates/arti-testing",

    "crates/arti-rpc-client-core",

    "maint/fixup-features",
    "maint/keygen-openssh-test",

    "examples/gsoc2023/connection-checker",
    "examples/gsoc2023/dns-resolver",
    "examples/gsoc2023/obfs4-checker",
    "examples/gsoc2023/pt-proxy",
    "examples/hyper/hyper-http-client-example",
    "examples/hyper/hyper-http-hs-example",
    "examples/axum/axum-hello-world",
    "examples/download-manager",
]

resolver = "2"

[profile.release]
# By default we'd like to get good performance and a small download size.
# (Assuming xz compression on the binary.)
#
# The biggest win is to run `strip --strip-debug` on the binary after
# generating it, to throw out debugging symbols that we inherited from
# other libraries.  Don't do `strip --strip-unused`, though, or you'll
# break backtraces.  That saves about 21% download size.

# Using LTO saves a further 14% of download size, and improves performance,
# at the cost of compile time.
lto = true
# Setting codegen-units=1 saves a further 7% download size.  It also
# improves performance at the cost of compile time.
codegen-units = 1
# Optimize for size.  [Actually this is even smaller than 'z' on rust
# 1.56.  It saves about 11% download size over the default value of '3'.]
opt-level = 's'

[profile.release.package.slotmap-careful]
opt-level = 2

[profile.quicktest]
# This profile is meant to be a compromise between "release" (which
# takes a long time to build) and "dev" (which can be too slow to actually
# use when connecting over the Tor network).
inherits = "release"
lto = "thin"
codegen-units = 16
opt-level = 2
incremental = true

[profile.bench]
# For "cargo bench", which is only used by some crates.
# Inherits release build settings, but adds full debug symbols.
debug = 2
strip = "none"

# Setting workspace default warnings
# IMPORTANT this list applies only to the main code, the lints in [./maint/add_warning] still applies to test code
# NOTE the `renamed_and_removed_lints` and `unknown_lints` should be in the pipeline code (se issue)
# Wish we could
#  unused_crate_dependencies = { level: "warn" }
# Decided not:
#   missing_debug_implementations = { level: "deny" }
#
# the following lints are applied / turned off in CI 
# renamed_and_removed_lints -D (stable) / -A (nightly)
# unknown_lints -A (stable) / -D (nightly)
[workspace.lints.rust]
    missing_docs = { level = "warn" }
    noop_method_call = { level = "warn" }
    unreachable_pub = { level = "warn" }

# Decided not: 
# redundant_pub_crate= { level = "deny" }
# future_not_send= { level = "deny" }
# redundant_closure_for_method_calls= { level = "deny" }
# panic= { level = "deny" }
# if_then_some_else_none= { level = "deny" }
# expect_used= { level = "deny" }
# option_if_let_else= { level = "deny" }
# pub_enum_variant_names= { level = "deny" }
[workspace.lints.clippy]
    all = { level = "warn" }
    await_holding_lock = { level = "deny" }
    cargo_common_metadata = { level = "deny" }
    cast_lossless = { level = "deny" }
    checked_conversions = { level = "deny" }
    cognitive_complexity = { level = "warn" }
    debug_assert_with_mut_call = { level = "deny" }
    exhaustive_enums = { level = "deny" }
    exhaustive_struCts = { level = "deny" }
    expl_impl_clone_on_copy = { level = "deny" }
    fallible_impl_from = { level = "deny" }
    implicit_clone = { level = "deny" }
    large_stack_arrays = { level = "deny" }
    manual_ok_or = { level = "warn" }
    missing_docs_in_private_items = { level = "deny" }
    needless_borrow = { level = "warn" }
    needless_pass_by_value = { level = "warn" }
    option_option = { level = "warn" }
    print_stderr = { level = "deny" }
    print_stdout = { level = "deny" }
    rc_buffer = { level = "warn" }
    ref_option_ref = { level = "deny" }
    semicolon_if_nothing_returned = { level = "warn" }
    trait_duplication_in_bounds = { level = "warn" }
    unchecked_duration_subtraction = { level = "deny" }
    unnecessary_wraps = { level = "deny" }
    unseparated_literal_suffix = { level = "warn" }
    unwrap_used = { level = "deny" }
    mod_module_files = { level = "deny" }
    let_unit_value = { level = "allow" } # This can reasonably be done for explicitness
    uninlined_format_args = { level = "allow" }
    significant_drop_in_scrutinee = { level = "allow" } # arti/-/merge_requests/588/#note_2812945
    result_large_err = { level = "allow" } # temporary workaround for arti#587
    needless_raw_string_hashes = { level = "allow" } # complained-about code is fine, often best
    needless_lifetimes = { level = "allow" } # See arti#1765
